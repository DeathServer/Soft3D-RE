//=============================================================================
//
//	[ s2dengine_engine.h ]
//
//	the s2d engine proccess lib.
//
//	Copyright (c) 2006-2009, DingooGames. All rights reserved.
//
//=============================================================================
#ifndef __S2DENGINE_ENGINE_H__
#define __S2DENGINE_ENGINE_H__

//--------------------------------------------------------------------------------------------------------
#include "s2dengine_common.h"
//--------------------------------------------------------------------------------------------------------
namespace s2d
{
//--------------------------------------------------------------------------------------------------------
class Input;
class TexManager;
//--------------------------------------------------------------------------------------------------------
class Engine
{
//--------------------------------------------------------------------------------------------------------
public:
	// userdata is directly passed to vidinit
	Engine( void* userdata [] );
	virtual ~Engine( void );
//--------------------------------------------------------------------------------------------------------
//### virtual interfaces:
public:
	//----------------------------------------------------------------------------------------------------
	/// init all resources
	virtual result	Init( void ) = 0;
	//----------------------------------------------------------------------------------------------------
	/// free all resources
	virtual void	Free( void ) = 0;
	//----------------------------------------------------------------------------------------------------
	/// stop running
	virtual void		Stop( void );
	//----------------------------------------------------------------------------------------------------
	/// resume running
	virtual void		Resume( void );
protected:
	//----------------------------------------------------------------------------------------------------
	/// game logic before render
	virtual void	Exec( void ) = 0;
	//----------------------------------------------------------------------------------------------------
	/// game logic after render
	virtual void	Exec2( void ) = 0;
	//----------------------------------------------------------------------------------------------------
	/// pre-render proccess
	virtual void	PreRender( void ) = 0;
	//----------------------------------------------------------------------------------------------------
	/// render
	virtual void	Render( void ) = 0;
	//----------------------------------------------------------------------------------------------------
	/// post-render proccess
	virtual void	PostRender( void ) = 0;
//--------------------------------------------------------------------------------------------------------
//### general interfaces:
public:
	//----------------------------------------------------------------------------------------------------
	/// set wanted fps
	//NOTE: the wanted fps is just a reference, real fps may differ.
	void		SetFPS( s32 fps );
	//----------------------------------------------------------------------------------------------------
	/// start running
	void		Start( void );
	//----------------------------------------------------------------------------------------------------
	/// return true if engine is running
	s32			IsRunning( void );
	//----------------------------------------------------------------------------------------------------
	/// do a standard game frame
	void		OneFrame( void );
	//----------------------------------------------------------------------------------------------------
	/// exit 
	void		Exit( void );
private:
	//----------------------------------------------------------------------------------------------------
	/// begin current frame
	void		BeginFrame( void );
	//----------------------------------------------------------------------------------------------------
	/// end current frame
	void		EndFrame( void );
	//----------------------------------------------------------------------------------------------------
	/// sync frame
	void		Sync( void );
//--------------------------------------------------------------------------------------------------------
//### data members:
private:
	s32				m_isRunning;

	s32				m_LastTime;
	s32				m_NowTime;

	s32				m_WantFPS;
	

	s32				m_WantFrameTime;

protected:
	// render target
	VID*			m_pVideo;

	// Screen width
	s32						m_iScreenWidth;
	
	// Screen height
	s32						m_iScreenHeight;

	// shader
	BasicShader*	m_pShader;

public:
	/// audio player
	AudioPlayer*	m_pAudioPlayer;
	
	// input
	Input*			m_pInput;

	// current 2d renderer
	Draw2D*			m_pDraw2D;
	s32				m_RealFPS;
};
//--------------------------------------------------------------------------------------------------------
};//namespace s2d
//--------------------------------------------------------------------------------------------------------

#endif//__S2DENGINE_ENGINE_H__
