//=============================================================================
//
//	[ s2dbase_audio.h ]
//
//	the s2d audio proccess lib.
//
//	PLATFORM DEPENDENT!!!平台相关
//
//	Copyright (c) 2006-2009, DingooGames. All rights reserved.
//
//=============================================================================

#ifndef __S2DENGINE_AUDIO_H__
#define __S2DENGINE_AUDIO_H__

//--------------------------------------------------------------------------------------------------------
#include "s2dbase_common.h"
#include "s2dbase_io.h"
//--------------------------------------------------------------------------------------------------------
namespace s2d
{
//--------------------------------------------------------------------------------------------------------
enum AudioState
{
	AUDIO_PLAYING = 0,				// playing
	AUDIO_STOPPED,				// stopped

	MAX_AUDIO_STATES
};
//--------------------------------------------------------------------------------------------------------
class AudioDevice;
//--------------------------------------------------------------------------------------------------------
// AudioData:
//--------------------------------------------------------------------------------------------------------
class AudioData
{
//--------------------------------------------------------------------------------------------------------
//### interfaces:
public:
	//---------------------------------------------------------------------------------------------------------
	AudioData( void );

	//---------------------------------------------------------------------------------------------------------
	~AudioData( void );

	//---------------------------------------------------------------------------------------------------------
	/// load PCM res
	result		LoadPCM(
					const Char* pfilename			// [in] res file name
				);
public:
	//---------------------------------------------------------------------------------------------------------
	///get audio buffer size 
	s32			GetSize();

	//---------------------------------------------------------------------------------------------------------
	///get audio length 
	s32			GetLength();

	//---------------------------------------------------------------------------------------------------------
	/// get audio frequency
	s32			GetFreq();

	//---------------------------------------------------------------------------------------------------------
	/// get audio buffer
	s16*		GetBuf();
private:
	//----------------------------------------------------------------------------------------------------
	/// decoder input stream
	void		DecoderVer(
						s8*		pCodeBuf,			// [in] code buffer
						s32		iSize,				// [in] buffer size
						s16*	pOutBuf				// [out] out buffer
				);
//--------------------------------------------------------------------------------------------------------
//### data members:
private:
	// audio frequency
	s32 m_iFrequency;

	// audio buffer size
	s32 m_iSize;

	// audio length
	s32 m_iLength;

	// audio buffer
	s16* m_pBuffer;
};

//--------------------------------------------------------------------------------------------------------
// AudioPlayer:
//--------------------------------------------------------------------------------------------------------
class AudioPlayer
{
//--------------------------------------------------------------------------------------------------------
//### interfaces:
public:
	//---------------------------------------------------------------------------------------------------------
	AudioPlayer( void );

	//---------------------------------------------------------------------------------------------------------
	~AudioPlayer( void );


	//---------------------------------------------------------------------------------------------------------
	/// init player
	bool		Init();

	//---------------------------------------------------------------------------------------------------------
	/// play audio
	void		Play(
					AudioData* pAudio,	// [in] audio to play
					s32	iChannel,		// [in] audio channel
					s32 iLength,		// [in] audio length
					s32 iVolume,		// [in] channel volume(0-255)
					s32 bRepeate		// [in] audio repeated state
				);
	//---------------------------------------------------------------------------------------------------------
	/// Pause Audio Device 
	void		Pause( void );

	//---------------------------------------------------------------------------------------------------------
	/// Resume Audio Device 
	void		Resume( void );
	//---------------------------------------------------------------------------------------------------------
	/// stop audio
	void		Stop(
					s32	iChannel		// [in] audio channel
				);
	//---------------------------------------------------------------------------------------------------------
	/// stop audio
	void		StopAll( void );
	//---------------------------------------------------------------------------------------------------------
	/// get player state
	AudioState	GetState(
					s32	iChannel		// [in] audio channel
				);

	//---------------------------------------------------------------------------------------------------------
	/// Set the channel repeat state
	void		SetChlRep(
					s32	iChannel,		// [in] audio channel
					s32 bRep			// [in] repeat state
				);
	//---------------------------------------------------------------------------------------------------------
	/// get the channel repeat state
	bool		GetChlRep(
					s32	iChannel		// [in] audio channel
				);

	//---------------------------------------------------------------------------------------------------------
	/// Set the channel volume
	void		SetChlVol( 
					s32	iChannel,		// [in] audio channel
					s32 iVolume			// [in] channel volume(0-255)
				);

	//---------------------------------------------------------------------------------------------------------
	/// Get the channel volume
	s32			GetChlVol(
					s32	iChannel		// [in] audio channel
				);

	//---------------------------------------------------------------------------------------------------------
	/// Set the main volume
	void		SetMainVol( 
					s32 iVolume		// [in] main volume (0-255)
				);

	//---------------------------------------------------------------------------------------------------------
	/// Get the main volume
	s32			GetMainVol();

//--------------------------------------------------------------------------------------------------------
//### data members:
private:
	//audio device
	AudioDevice * m_pDevice;

public:
	//max channel count
	enum{
		MaxChannels = 8,
	};
};

//--------------------------------------------------------------------------------------------------------
};//namespace s2d
//--------------------------------------------------------------------------------------------------------
#include "s2dbase_audio.inl"
//--------------------------------------------------------------------------------------------------------
#endif//__S2DENGINE_AUDIO_H__
